// File: /assets/css/utilities/_mixins.scss
// Author: Martin Burford (martin@martinburford.co.uk)

@mixin box-sizing {
  box-sizing: border-box;
}

@mixin icon($iconName,$color){
  color: $color;
  content: map-get($icons,$iconName); 
}

@mixin icon-icomoon($iconName, $color, $size, $customSideOffset: 0, $customTopOffset: 0, $position: 'before', $valignment: 'middle', $spaceToContent: 10){
  $padding-type: if($position == 'before', 'left', 'right');
  $sideOffset: if($customSideOffset != 0, $customSideOffset, '0px');

  padding-#{$padding-type}: #{$size + $spaceToContent}px; 
  position: relative;

  &:#{$position} {
    @include icon($iconName, $color); 
    display: block;
    font-family: 'icomoon';
    font-size: #{$size}px;
    height: #{$size}px;
    line-height: #{$size}px;
    position: absolute;
    top: calc(50% - #{$size/2}px);
    width: #{$size}px;

    #{$padding-type}: #{$sideOffset}; // Either left or right position

    @if $valignment == 'top' {
      top: 0;
    }

    @if $customTopOffset != 0 {
      top: #{$customTopOffset}px;
    }
  }
}

@mixin border-radius($radius) {
  border-radius: $radius;
}

@mixin gradient-top-to-bottom-full($top,$bottom) {
  background-color: $bottom;
  background: -moz-linear-gradient($top,$bottom);
  background: -o-linear-gradient($top,$bottom);
  background: -webkit-linear-gradient($top,$bottom);
  background: linear-gradient($top,$bottom);  
}

@mixin left-to-right-gradient($color) {
  background: -moz-linear-gradient(left, rgba($color,0) 0%, rgba($color,0.5) 40%, rgba($color,0.6) 50%, rgba($color,0.5) 60%, rgba($color,0) 100%);
  background: -webkit-linear-gradient(left, rgba($color,0) 0%, rgba($color,0.5) 40%, rgba($color,0.6) 50%, rgba($color,0.5) 60%, rgba($color,0) 100%);
  background: linear-gradient(to right, rgba($color,0) 0%, rgba($color,0.5) 40%, rgba($color,0.6) 50%, rgba($color,0.5) 60%, rgba($color,0) 100%);
}

@mixin left-to-right-gradient-to-transparent($color) {
  background: -moz-linear-gradient(left, $color 0%, rgba($color,0.75) 25%, rgba($color,0.5) 50%, rgba($color,0.25) 75%, rgba($color,0) 100%);
  background: -webkit-linear-gradient(left, $color 0%, rgba($color,0.75) 25%, rgba($color,0.5) 50%, rgba($color,0.25) 75%, rgba($color,0) 100%);
  background: linear-gradient(to right, $color 0%, rgba($color,0.75) 25%, rgba($color,0.5) 50%, rgba($color,0.25) 75%, rgba($color,0) 100%);
}

@mixin shadowbox($glowColor: $white, $opacity: 0.075, $inset: false, $shadowSize: 2px){
  $useInset: null;

  @if $inset {
    $useInset: inset;
  }

  box-shadow: $useInset 0px 0px $shadowSize $shadowSize rgba($glowColor, $opacity); 
}

@mixin circle($size, $parentHeight: true){
  @if $parentHeight {
    height: #{$size}px;
    width: #{$size}px;
  }

  &:before {
    height: #{$size}px;
    width: #{$size}px;
  }
}

// RESPONSIVE OVERRIDES
// The ability to provide custom media queries, either in line with grid breakpoints, or bespoke
@mixin breakpoint-specific($settings) {
  @if map-has-key($breakpoints, $settings) {
    @media all and #{map-get($breakpoints, $settings)} {
      @content;
    }
  } @else {
    $query: '';

    @if (map-has-key($settings, min-width)) {
      $media-min: map-get($settings, min-width);
      $query: $query + unquote(' and (min-width: #{$media-min})');
    }

    @if (map-has-key($settings, max-width)) {
      $media-max: map-get($settings, max-width);
      $query: $query+unquote(' and (max-width: #{$media-max})');
    }

    @media all #{$query} {
      @content;
    }
  }
}
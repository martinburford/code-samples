include ../../../templates/mixins/svg-icon.pug
include tooltip.pug

//- ****
//- VARIABLES
//- ****
-
  var defaultColumnClasses = 'col-12 col-lg-10 col-xl-8';

//- ****
//- FUNCTIONS
//- ****

-
  /**
   * Is a form element required/mandatory?
   * @function isRequiredfield
   * @param {string} labelClassname - The default prefixed classname for labels of the given form element type
   * @param {boolean} isRequired - Whether or not a form element is required or not
   * @returns {string} - The classname for the form elements corresponding label
   */
  function isRequiredField(labelClassname, isRequired){
    labelClassname = labelClassname || 'form-element__label';
    if(isRequired){
      labelClassname += ' form-element--required';
    }

    return labelClassname;
  }

  /**
   * Is a form element in an error state?
   * @function isError Field
   * @param {string} elementType - The unique form element type name (eg: 'text-area')
   * @param {boolean} isError - Whether or not the the form element is in an error state
   * @param {array} additionalClasses - Any additional classes which are required for a given form element (eg: datapicker and monthpicker both have an additional modifier, datapicker--date && datapicker--month)
   * @returns {string} - A space separated classlist to use for the form element
   */
  function isErrorField(elementType, isError, additionalClasses){
    var formElementClassname = `form-element ${elementType}`;

    // Attach any additional classnames
    if(additionalClasses && additionalClasses.length > 0){
      formElementClassname += ` ${additionalClasses.join(' ')}`;
    }

    if(isError){
      formElementClassname += ` ${elementType}--error`;
    }

    return formElementClassname;
  }

//- ****
//- MIXINS
//- ****

//- Depending on whether a form element is nested or not determines which kind of DOM wrapper is required
//- @mixin rowWrapper
//- @param {number} id - The form elements unique id
//- @param {boolean} isRootFormElement - Whether or not the form element is conditional (embedded) or a root level DOM node
//- @param {object} containerAttribtues - Any custom data attributes the parent DOM element requires
//- @param {object} conditional - All conditional form elements
//- @param {object} tooltip - ALl tooltip data
mixin rowWrapper(id, isRootFormElement, containerAttributes, conditional, tooltip)
  if isRootFormElement
    .row.justify-content-center
      block
    if tooltip
      //- Create the HTML code for the tooltip dynamically, based on provided data
      +tooltip(tooltip, id)
    if conditional
      +conditionalElements(conditional)
  else
    .container&attributes(containerAttributes)
      .row.justify-content-center
        block
      if tooltip
        //- Create the HTML code for the tooltip dynamically, based on provided data
        +tooltip(tooltip, id)
      if conditional
        +conditionalElements(conditional)

//- Create all conditional elements associated with a form element
//- @mixin conditionalElements
//- @param {object} data - The data block for any conditional elements to be generated
mixin conditionalElements(data)
  each conditional in data
    div(class='nested-question' data-related-question-id=conditional.id)
      each element in conditional.elements
        case element.type
          when 'textbox'
            +textbox(element.data, false)
          when 'rte'
            +rte(element.data)
          when 'textarea'
            +textarea(element.data, false)
          when 'radio-button-group'
            +radioButtonGroup(element.data, false)
          when 'radio-button-stacked'
            +radioButtonStacked(element.data, false)
          when 'checkbox'
            +checkbox(element.data, false)

//- Render a form element, inclusive of whether it contains an embedded error message
//- @mixin renderFormElement
//- @param {object} embeddedErrorData - The data for when an embedded error is required
mixin renderFormElement(embeddedErrorData)
  if embeddedErrorData
    .embedded-error
      block
      .embedded-error__message
        .embedded-error__icon
          +svg-icon(embeddedErrorData.icon, 'icon-full')
        h5.embedded-error__heading= embeddedErrorData.heading
        h5.embedded-error__sub-heading= embeddedErrorData['sub-heading']
        p= embeddedErrorData.content
        a(href=embeddedErrorData.link.url)= embeddedErrorData.link.text
  else
    block

//- ****
//- FORM ELEMENTS
//- ****

//- Create a textarea
//- @mixin textarea
//- @param {object} data - The data block for the textara to be generated
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
mixin textarea(data, isRootFormElement)
  -
    var elementAttributes = {
      type: 'textarea',
      id: data.id,
      name: data.name
    }

    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('text-area', data['has-error']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

  //- Textareas cannot contain conditional form elements, so arguments 3 and 4 are null
  +rowWrapper(data.id, !isRootFormElement, null, null, tooltip)
    .col-12.col-lg-10.col-xl-8
      div(class=formElementClassname)
        label(class=labelClassname, for=data.id)= data.label
        textarea.text-area__input&attributes(elementAttributes)

        if data['has-error']
          .form-element--error= data['error-message']

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a textbox
//- @mixin textbox
//- @param {object} data - The data block for the textbox to be generated
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
//- @param {string} customColumnClasses - Should the default column layout be used, or a custom one?
mixin textbox(data, isRootFormElement, customColumnClasses)
  - 
    var elementAttributes = {
      type: data.type,
      id: data.id,
      name: data.name
    }

    //- Does the tooltip have custom trigger labels
    var tooltipLabelData = {};
    if(data.tooltip && data.tooltip.trigger){
      tooltipLabelData = data.tooltip.trigger;
    }

    //- Attach a required property to all mandatory fields
    if(data.mandatory){
      elementAttributes.required = 'Required';
    }

    //- What are the default classes for the textfield?
    var inputClassname = 'text-input__input';
    if(data.hasOwnProperty('unit')){
      inputClassname += ' form-element__input--inline';
    }

    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('text-input', data['has-error']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

    //- Is there a custom grid classname to use instead of the default?
    var gridColumnClassname = !customColumnClasses ? defaultColumnClasses : customColumnClasses;

  //- Textboxes cannot contain conditional form elements, so arguments 3 and 4 are null
  +rowWrapper(data.id, !isRootFormElement, null, null, tooltip)
    div(class=gridColumnClassname)
      div(class=formElementClassname)
        label(class=labelClassname, for=data.id)= data.label
        +renderFormElement(data['embedded-error'])
          input(class=inputClassname)&attributes(elementAttributes)

        if data.hasOwnProperty('unit')
          span.form-element__unit= data.unit

        if data['has-error']
          .form-element--error= data['error-message']

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a radio button group
//- @mixin radioButtonGroup
//- @param {object} data - the data block for the radio button group
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
mixin radioButtonGroup(data, isRootFormElement)
  - 
    var hasConditionalLogic = data.hasOwnProperty('conditional')
    var dataAttributes = {}
    if(hasConditionalLogic){
      dataAttributes['data-has-conditional-logic'] = 'true';
    }

    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('radio-button', data['has-error']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

  +rowWrapper(data.id, !isRootFormElement, dataAttributes, data.conditional, tooltip)
    .col-12.col-lg-10.col-xl-8
      div(class=formElementClassname)
        p(class=labelClassname)= data.question

        if data.image && data.image.url
          img(class='radio-button__image', src=data.image.url, alt=data.image['alt-text'])

        .row

          each field in data.fields
            -
              var elementAttributes = {
                id: field.id,
                name: data.name,
                type: 'radio',
                checked: field.checked
              }

              //- Does the question answer have any conditions to be met
              if(hasConditionalLogic){
                var condition = 'null';
                if(field.hasOwnProperty('conditional-id')){
                  condition = field['conditional-id']
                }

                elementAttributes['data-related-question'] = condition;
              }

            .col-sm-6
              .radio-item
                input.radio-item__input.sr-only&attributes(elementAttributes)
                label.radio-item__label(for=field.id)
                  span.radio-item__icon
                  | #{field.label}

        if data['has-error']
          .form-element--error= data['error-message']

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a radio button (stacked) group
//- @mixin radioButtonStacked
//- @param {object} data - The data block for the radio button (stacked) group
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
mixin radioButtonStacked(data, isRootFormElement)
  - 
    var hasConditionalLogic = data.hasOwnProperty('conditional')
    var dataAttributes = {}
    if(hasConditionalLogic){
      dataAttributes['data-has-conditional-logic'] = 'true';
    }

    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

  +rowWrapper(data.id, !isRootFormElement, dataAttributes, data.conditional, tooltip)
    .col-12.col-lg-10.col-xl-8
      .form-element.radio-button
        p(class=labelClassname)= data.question
        .radio-button--stacked(data-name=data.name)

          each field in data.fields
            - 
              var wrapperAttributes = {}
              if(field.hasOwnProperty('is-other-please-specify')){
                if(field['is-other-please-specify']){
                  wrapperAttributes['data-is-other-please-specify'] = 'true';
                  wrapperAttributes['data-other-please-specify-label'] = field['other-please-specify-label'];
                }
              }

              var elementAttributes = {
                id: field.id,
                name: data.name,
                type: 'radio',
                checked: field.checked
              }

              //- Does the question answer have any conditions to be met
              if(hasConditionalLogic){
                var condition = 'null';
                if(field.hasOwnProperty('conditional-id')){
                  condition = field['conditional-id']
                }

                elementAttributes['data-related-question'] = condition;
              }

            .radio-item&attributes(wrapperAttributes)
              input.radio-item__input.sr-only&attributes(elementAttributes)
              label.radio-item__label(for=field.id)
                span.radio-item__icon
                | #{field.label}

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a radio image group
//- @mixin radioImageGroup
//- @param {object} data - The data block for the radio image group
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
mixin radioImageGroup(data, isRootFormElement)
  -
    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('radio-image', data['has-error']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

  //- Radio image groups cannot contain conditional form elements, so there are never 2nd and 3rd arguments
  +rowWrapper(data.id, !isRootFormElement, null, null, tooltip)
    .col-12.col-lg-10.col-xl-8
      div(class=formElementClassname)
        p(class=b=labelClassname)= data.question
        ul.radio-image__list

          each field in data.fields

            li.radio-image__item
              label.radio-image__label(for=field.id)
                img.radio-image__image(src=field.image.url, alt=field.image['alt-text'])
                span.radio-image__title= field.label
                input.sr-only(id=field.id, name=field.name, type="radio")

        if data['has-error']
          .form-element--error= data['error-message']

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a checkbox
//- @mixin checkbox
//- @param {object} data - The data block for the checkbox
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
//- @param {string} customColumnClasses - Should the default column layout be used, or a custom one?
mixin checkbox(data, isRootFormElement, customColumnClasses)
  - 
    var hasConditionalLogic = data.hasOwnProperty('conditional')
    var dataAttributes = {}
    if(hasConditionalLogic){
      dataAttributes['data-has-conditional-logic'] = 'true';
    }

    //- Is the form element required/mandatory?
    var formElementLabelClassname = isRequiredField('checkbox__label', data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('checkbox', data['has-error']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

    //- Is there a custom grid classname to use instead of the default?
    var gridColumnClassname = !customColumnClasses ? defaultColumnClasses : customColumnClasses;

  +rowWrapper(data.id, !isRootFormElement, dataAttributes, data.conditional, tooltip)
    div(class=gridColumnClassname)
      div(class=formElementClassname)

        -
          var elementAttributes = {
            id: data.id,
            name: data.name,
            type: 'checkbox',
            checked: data.checked
          }

          //- Does the question answer have any conditions to be met
          if(hasConditionalLogic){
            var condition = 'null';
            if(data.hasOwnProperty('conditional-id')){
              condition = data['conditional-id']
            }

            elementAttributes['data-related-question'] = condition;
          }

        input.checkbox__input.sr-only&attributes(elementAttributes)
        label(class=formElementLabelClassname, for=data.id)= data.label
          .checkbox__tickbox

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a multi-select group
//- @mixin multiSelectGroup
//- @param {object} data - The data block for the radio image group
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
mixin multiSelectGroup(data, isRootFormElement)
  - 
    var hasConditionalLogic = data.hasOwnProperty('conditional')
    var dataAttributes = {}
    if(hasConditionalLogic){
      dataAttributes['data-has-conditional-logic'] = 'true';
    }

    //- Is the form element required/mandatory?
    var formElementLabelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('multi-select', data['has-error']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

  +rowWrapper(data.id, !isRootFormElement, dataAttributes, data.conditional, tooltip)
    .col-12.col-lg-10.col-xl-8
      div(class=formElementClassname)
        p(class=formElementLabelClassname)= data.question

        each field in data.fields
          -
            var elementAttributes = {
              id: field.id,
              name: data.name,
              type: 'checkbox',
              checked: field.checked
            }

            //- Does the question answer have any conditions to be met
            if(hasConditionalLogic){
              var condition = 'null';
              if(field.hasOwnProperty('conditional-id')){
                condition = field['conditional-id']
              }

              elementAttributes['data-related-question'] = condition;
            }
          
          .multi-select__item
            input.multi-select__input.sr-only&attributes(elementAttributes)
            label.multi-select__label(for=field.id)= field.label

        if data['has-error']
          .form-element--error= data['error-message']

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a select dropdown
//- @mixin select
//- @param {object} data - The data block for the radio button (stacked) group
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
//- @param {string} customColumnClasses - Should the default column layout be used, or a custom one?
mixin select(data, isRootFormElement, customColumnClasses)
  -
    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('select', data['has-error']);

    // Is the select a basic select or a select with an icon?
    formElementClassname += data.hasOwnProperty('has-icon') ? ' select--icon' : ' select--basic';

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

    //- Is there a custom grid classname to use instead of the default?
    var gridColumnClassname = !customColumnClasses ? defaultColumnClasses : customColumnClasses;

  //- Selects cannot contain conditional form elements, so arguments 3 and 4 are null
  +rowWrapper(data.id, !isRootFormElement, null, null, tooltip)
    div(class=gridColumnClassname)
      div(class=formElementClassname)
        label(class=labelClassname, for=data.name)= data.label
        +renderFormElement(data['embedded-error'])
          .select__wrapper(data-name=data.name)

            select.select.js-select(name=data.name, id=data.id, placeholder=data['placeholder-text'])

              each option in data.options

                option(value=option.value)= option.label

            if data.hasOwnProperty('has-icon')
              .select__icon
                +svg-icon(selectIcon['icon-name'])

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a datepicker
//- @mixin datepicker
//- @param {object} data - The data block for the textara to be generated
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
mixin datepicker(data, isRootFormElement)
  -
    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('datepicker', data['has-error'], ['datepicker--date']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

  //- datepickers cannot contain conditional form elements, so arguments 3 and 4 are null
  +rowWrapper(data.id, !isRootFormElement, null, null, tooltip)
    .col-12.col-lg-10.col-xl-8
      div(class=formElementClassname, data-datepicker-min-date='', data-datepicker-max-date='')
        label(class=labelClassname, for=data.id)= data.label
        p.form-element__help= data.help
        div.datepicker__input-wrapper
          input.datepicker__input(type='text', id=data.id, placeholder=data.placeholder)

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a monthpicker
//- @mixin monthpicker
//- @param {object} data - The data block for the textara to be generated
//- @param {boolean} isRootFormElement - Whether or not the form element should be wrapper within a .container or a .row DOM element
mixin monthpicker(data, isRootFormElement)
  -
    //- Is the form element required/mandatory?
    var labelClassname = isRequiredField(null, data.mandatory);

    //- Is the form element in an error state?
    var formElementClassname = isErrorField('datepicker', data['has-error'], ['datepicker--month']);

    //- Is there a tooltip to generate
    var tooltip = data.hasOwnProperty('tooltip') ? data.tooltip : null;

  //- monthpickers cannot contain conditional form elements, so arguments 3 and 4 are null
  +rowWrapper(data.id, !isRootFormElement, null, null, tooltip)
    .col-12.col-lg-10.col-xl-8
      div(class=formElementClassname, data-datepicker-min-date='', data-datepicker-max-date='')
        label(class=labelClassname, for=data.id)= data.label
        p.form-element__help= data.help
        div.datepicker__input-wrapper
          input.datepicker__input(type='text', id=data.id, placeholder=data.placeholder)

        if tooltip
          //- Create the trigger for the tooltip
          +tooltipTrigger(data.id, {})

//- Create a rte string
//- @mixin rte
//- @param {object} data - The data block for the RTE to be generated
mixin rte(data)
  //- Should this RTE block stop the form from being submittable?
  -
    var elementClassname = 'form-element form-element--rte';
    if(data['end-form-submission']){
      elementClassname += ' rte-end-form-submission';
    }

  //- Text blocks cannot contain conditional form elements, so arguments 3 and 4 are null
  +rowWrapper(data.id, !isRootFormElement, null, null, tooltip)
    .col-12.col-lg-10.col-xl-8
      div(class=elementClassname)!= data.content
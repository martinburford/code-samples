@use 'sass:math';

@import 'styles/mixins';
@import 'styles/placeholders';
@import 'styles/variables';

/// @mixin responsive-rows - Which percentage width should individual items be?
/// @param {string} $breakpoint-name - Which breakpoint should the CSS being applied against?
@mixin responsive-rows($breakpoint-name) {
  $column-breaks: 2, 3, 4, 5, 6;

  @each $column-break in $column-breaks {
    &.#{$breakpoint-name}-per-row-#{$column-break} [data-component-id='item-listing-vertical'] {
      width: calc(#{math.div(100%, $column-break)} - #{$spacing-xs});
    }
  }
}

/// @mixin responsive-rows-scrolling - Which percentage width should individual items be?
/// @param {string} $breakpoint-name - Which breakpoint should the CSS being applied against?
@mixin responsive-rows-scrolling($breakpoint-name) {
  $column-breaks: (
    2: '5%',
    3: '2.5%',
    4: '1.4%',
    5: '0.9%',
    6: '0.75%',
  );

  @each $column-break, $percentage-reducer in $column-breaks {
    &.#{$breakpoint-name}-per-row-#{$column-break} [data-component-id='item-listing-vertical'] {
      width: calc((#{math.div(100%, $column-break)} - #{$percentage-reducer}) - #{$spacing-xs});
    }
  }
}

.item-listings-vertical {
  @extend %border-box;
  margin-bottom: 0;
  margin-left: -$spacing-xs;
  margin-top: -$spacing-xs;
  width: calc(100% + #{$spacing-xs});

  // Which child components need their bottom gutters removed?
  [data-component-id='item-listing-vertical'],
  [data-component-id='product-listing-vertical'],
  [data-component-id='product-listing-light-vertical'],
  [data-component-id='trending-listing-vertical'] {
    margin-bottom: 0;
  }

  [data-component-id='item-listing-vertical'] {
    @extend %border-box;
    margin-left: $spacing-xs;
    margin-top: $spacing-xs;
  }

  &:not(.scrollable) {
    .outer {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }

    @include breakpoint($mobile-up) {
      @include responsive-rows('mobile');
    }

    @include breakpoint($tablet-up) {
      @include responsive-rows('tablet');
    }

    @include breakpoint($desktop-up) {
      @include responsive-rows('desktop');
    }
  }

  &.scrollable {
    margin-left: 0;
    overflow: hidden;
    width: 100%;

    .outer {
      display: flex;
      flex-direction: row;
      overflow: auto;
    }

    [data-component-id='item-listing-vertical'] {
      flex: 0 0 auto;
    }

    [data-component-id='item-listing-vertical']:first-child {
      margin-left: 0;
    }

    @include breakpoint($mobile-up) {
      @include responsive-rows-scrolling('mobile');
    }

    @include breakpoint($tablet-up) {
      @include responsive-rows-scrolling('tablet');
    }

    @include breakpoint($desktop-up) {
      @include responsive-rows-scrolling('desktop');
    }
  }

  // Override COLUMN WIDTHS if the data-view-mode is equal to "list" (rather than the default "grid")
  &[data-view-mode='list'] {
    [data-component-id='item-listing-vertical'] {
      width: 100% !important; // Use !important to override all of the responsive specificity CSS definitions that would otherwise take precedence
    }
  }
}

// Right-to-left layout
@include rtl() {
  .item-listings-vertical {
    &.scrollable {
      [data-component-id='item-listing-vertical']:first-child {
        margin-left: $spacing-xs;
        margin-right: 0;
      }

      [data-component-id='item-listing-vertical']:last-child {
        margin-left: 0;
      }
    }
  }
}

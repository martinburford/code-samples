// File: _utils.scss
// Author: Martin Burford (martin@martinburford.co.uk)

//- ****
//- FUNCTIONS
//- ****

/**
 * Access and retrieve a nested map
 * @function map-deep-get
 * @param {Map} $map - The map to retrieve the key/value from
 * @param {Arglist} $keys - The key chain to parse
 * @returns {*} - The value for the desired map key
 */
@function map-deep-get($map, $keys...){
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    
    @return $map;
}

/**
 * Deep set function to set a value in nested maps
 * @function map-deep-set
 * @param {Map} $map - Map
 * @param {List} $keys -  Key chaine
 * @param {*} $value - Value to assign
 * @returns {Map}
 */
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}

/**
 * Return a font size based a given breakpoint
 * @function get-body-font-styles
 * @param {number} $size - The classname, prefixed by 'body' (eg: 'body1', 'body2',  'body3')
 * @param {string} $breakpoint - The name of the breakpoint to retrieve the font size for
 * @returns {string} - The pixel value of the required font size (inclusive of 'px' suffix)
 */
@function get-body-font-styles($size, $breakpoint) {
  @return map-deep-get($body-copy-text-map, $breakpoint, 'body#{$size}');
}

/**
 * Return a font size based a given breakpoint
 * @function get-heading-font-styles
 * @param {number} $size - The classname, prefixed by 'h' (eg: 'h1', 'h2',  'h3')
 * @param {string} $breakpoint - The name of the breakpoint to retrieve the font size for
 * @returns {string} - The pixel value of the required font size (inclusive of 'px' suffix)
 */
 @function get-heading-font-styles($size, $breakpoint) {
  @return map-deep-get($heading-text-map, $breakpoint, 'h#{$size}');
}

/**
 * Encode all symbols within a provided string of text
 * @function url-encode
 * @param {string} - The string to be url encoded
 * @returns {string} - The fully url encoded string
 */
@function url-encode($string) {
    $map: (
        "%": "%25",
        "<": "%3C",
        ">": "%3E",
        // " ": "%20", // If spaces are also to be encoded, uncomment this
        "!": "%21",
        "*": "%2A",
        "'": "%27",
        '"': "%22",
        "(": "%28",
        ")": "%29",
        ";": "%3B",
        ":": "%3A",
        "@": "%40",
        "&": "%26",
        "=": "%3D",
        "+": "%2B",
        "$": "%24",
        ",": "%2C",
        "/": "%2F",
        "?": "%3F",
        "#": "%23",
        "[": "%5B",
        "]": "%5D"
    );

    $new: $string;

    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }

    @return $new;
}

/**
 * Format an SVG as a content string
 * @function css-svg
 * @param {string} $string - The SVG as a string (un-encoded)
 * @param {string} $colour - The hex code of the svg icon to be shown
 */
@function css-svg($string, $colour) {
  $svg-content: url-encode($string);
  $svg-content: str-replace($svg-content, '{{fill-colour}}', $colour);
  $svg-content: str-replace($svg-content, '{{stroke-colour}}', $colour);

  @return url('data:image/svg+xml,#{$svg-content}');
}

//- ****
//- MIXINS
//- ****

/**
 * Disable outlines for all element states
 * @mixin no-outline
 */
@mixin no-outline {
  &,
  &:hover,
  &:focus,
  &:active {
    outline: 0;
  }
}

/**
 * Browser Targeting
 * @mixin ie-10-11
 */
@mixin ie-10-11 {
  // The logic here is that only IE 10/11 support these media queries (ignored by IE9) IE 10/11
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

/**
 * The logic here is that only IE Edge support these media queries
 * @mixin ie-edge
 */
@mixin ie-edge {
  @supports (-ms-accelerator:true) or (-ms-ime-align: auto) {
    @content;
  }
}

/**
 * Return a font size based a given breakpoint
 * @mixin body-copy-text
 * @param {number} $size - The classname, prefixed by 'body' (eg: 'body1', 'body2',  'body3')
 * @param {string} $breakpoint - The name of the breakpoint to retrieve the font size for
 */
@mixin body-copy-text($size: 1, $breakpoint: 'mobile') {
  $body-styles: get-body-font-styles($size, $breakpoint);

  font-size: calculate-rem(map-get($body-styles, 'font-size'));
  line-height: calculate-rem(map-get($body-styles, 'line-height'));
}

/**
 * Return a font size based a given breakpoint
 * @mixin heading-copy-text
 * @param {number} $size - The classname, prefixed by 'h' (eg: 'h1', 'h2',  'h3')
 * @param {string} $breakpoint - The name of the breakpoint to retrieve the font size for
 */
@mixin heading-text($size: 1, $breakpoint: 'mobile') {
  $heading-styles: get-heading-font-styles($size, $breakpoint);

  font-size: calculate-rem(map-get($heading-styles, 'font-size'));
  line-height: calculate-rem(map-get($heading-styles, 'line-height'));
}

/**
 * Format an SVG as a content string
 * @mixin css-svg-icon
 * @param {string} $icon-name - The string key name of the icon to show (based on the SASS map 'svg-icons-map')
 */
@mixin css-svg-icon($icon-name, $colour: '#000000') {
  content: css-svg(map-get($svg-icons-map, $icon-name), $colour);
}

/**
 * Format an SVG as a content string
 * @mixin css-svg-icon
 * @param {string} $icon-name - The string key name of the icon to show (based on the SASS map 'svg-icons-map')
 */
@mixin css-svg-background($icon-name, $colour: '#000000') {
  content: ' ';
  background-size: contain;
  background: transparent css-svg(map-get($svg-icons-map, $icon-name), $colour) no-repeat center center;
}

/**
 * Add dropshadows to a specific DOM element
 * @mixin shadowbox
 * @param {string} $glow-color - The color of the dropshadow
 * @param {number} $opacity - What alhpa/transparency value to give to the dropshadow
 * @param {boolean} $inset - Whether to sit the dropshadow inset or outset
 * @param {string} $shadow-size - The size of the dropshadow
 * @param {boolean} $no-dropshadow - Whether or not to apply the glow effect (vs a flat border)
 */
@mixin shadowbox($glow-color, $opacity, $inset: false, $shadow-size: 2px, $no-dropshadow: false){
  $use-inset: null;
  $use-dropshadow: $shadow-size;

  @if $inset {
    $use-inset: inset;
  }

  @if $no-dropshadow {
    $use-dropshadow: 0px;
  }

  box-shadow: $use-inset 0px 0px $use-dropshadow $shadow-size rgba($glow-color, $opacity); 
}

/**
 * Attach box-sizing to an element to ensure padding remains internal to the elements height and width
 * @mixin box-sizing
 */
@mixin box-sizing() {
  box-sizing: border-box;
}

/**
 * Generate an icon with 2 circle rings surrounding it
 * @mixin icon-with-circles
 * @param {string} $iconName - The name of the icon to load
 * @param {number} $height - The height of the icon
 * @param {number} $width - The width of the icon
 * @param {string} [$borderColor] - The hex code for the 2 rings surrouding the icon
 * @param {number} [$innerBorderSize] - The width of the inner ring surrounding the icon
 * @param {number} [$outerBorderSize] - The width of the outer ring surrounding the icon
 * @param {number} [$ringsMargin] - The gap between the icon and the inner ring AND the inner ring and the outer ring
 */
@mixin icon-with-circles($iconName, $height, $width, $borderColor: gray('300'), $innerBorderSize: 3, $outerBorderSize: 1, $ringsMargin: 16) {
  height: #{$height}px;
  width: #{$width}px;

  $iconWithCirclesInnerSize: calc(100% + #{$ringsMargin*2}px);
  $iconWithCirclesOuterSize: calc(100% + #{$ringsMargin*4}px);
  $iconWithCirclesInnerOffset: calc(0 - #{$ringsMargin}px);
  $iconWithCirclesOuterOffset: calc(0 - #{$ringsMargin*2}px);

  &:before {
    @include border-radius(50%);
    border: #{$innerBorderSize}px solid #{$borderColor};
    content: '';
    display: block;
    height: $iconWithCirclesInnerSize;
    left: $iconWithCirclesInnerOffset;
    position: absolute;
    top: $iconWithCirclesInnerOffset;
    width: $iconWithCirclesInnerSize;
  }

  &:after {
    @include border-radius(50%);
    border: #{$outerBorderSize}px solid #{$borderColor};
    content: '';
    display: block;
    height: $iconWithCirclesOuterSize;
    left: $iconWithCirclesOuterOffset;
    position: absolute;
    top: $iconWithCirclesOuterOffset;
    width: $iconWithCirclesOuterSize;
  }

  .icon-with-circles__icon {
    display: inline-block;
    font-size: 0;
    height: 100%;
    width: 100%;

    &:before {
      @include css-svg-icon($iconName, $orange);
    }
  }
}